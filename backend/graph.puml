@startuml
package errors{
annotation errors {

-var ErrBidNotHigher: 
-var ErrAuctionAlreadyFinished: 
-var ErrAuctionUserBidUserMatch: 

}
}
package functions/api/auction/createAuction{
annotation functions/api/auction/createAuction {


-main()
}
interface auctionService{
+CreateAuction(ctx Context, auction Auction, itemID string): Auction, error
}
class response {
+ID: string
+AuctionDate: Time
+BuyoutPrice: *float64
+AuctionType: string
+BidIncrement: float64
+CreatorName: string
+ItemID: string
+EndDate: Time

}
class handler {
-auctionService: auctionService
+CreateAuction(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+ItemID: string
+AuctionDate: Time
+BuyoutPrice: *float64
+AuctionType: string
+BidIncrement: float64

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/auction/finishAuction{
annotation functions/api/auction/finishAuction {


-main()
}
interface auctionService{
+FinishAuction(ctx Context, auctionID string): error
}
class handler {
-auctionService: auctionService
+GetAuction(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+AuctionID: string

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/auction/getAuction{
annotation functions/api/auction/getAuction {


-main()
}
interface auctionService{
+GetAuctionByID(ctx Context, auctionID string): Auction, error
}
class handler {
-auctionService: auctionService
+GetAuction(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+AuctionID: string

}
class response {
+ID: string
+AuctionDate: Time
+BuyoutPrice: *float64
+AuctionType: string
+BidIncrement: float64
+CreatorID: string
+IsFinished: bool
+ItemID: string
+Stage: string
+StartDate: Time
+EndDate: Time

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/auction/getAuctionList{
annotation functions/api/auction/getAuctionList {


-auctionsToResponse(auctions []AuctionListView): response
-main()
}
interface auctionService{
+GetAuctions(ctx Context): []AuctionListView, error
}
class handler {
-auctionService: auctionService
+GetAuction(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+Limit: string

}
class response {
+Auctions: []auction

}
class auction {
+ID: string
+AuctionDate: Time
+BuyoutPrice: *float64
+AuctionType: string
+BidIncrement: float64
+IsFinished: bool
+CreatorID: string
+ItemID: string
+Item: itemResponse

}
class itemResponse {
+ID: string
+Description: string
+Category: string
+OwnerID: string
+Name: string
+PhotoURLs: []string
+AuctionID: string

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/bid/getAuctionBids{
annotation functions/api/bid/getAuctionBids {


-main()
}
interface bidService{
+GetLatestAuctionBids(ctx Context, auctionID string, optFns ... func( *OptionalGetParameters) ): []Bid, error
}
class handler {
-bidService: bidService
+PlaceBid(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+AuctionID: string

}
class response {
+Bids: []bidList

}
class bidList {
+ID: string
+AuctionID: string
+Timestamp: Time
+Value: float64
+UserID: string

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/bid/placeBid{
annotation functions/api/bid/placeBid {


-main()
}
interface bidService{
+PlaceBid(ctx Context, auctionID string, bid Bid): Bid, error
}
class request {
+AuctionID: string
+Value: float64

}
class response {
+ID: string
+AuctionID: string
+Timestamp: Time
+Value: float64

}
class handler {
-bidService: bidService
+PlaceBid(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class lambdaConfig {
+TableName: string

}
}
package functions/api/generateData{
annotation functions/api/generateData {


-main()
}
interface auctionService{
+GetAuctions(ctx Context): []AuctionListView, error
}
interface itemRepository{
+GetItemByID(ctx Context, itemID string): Item, error
}
interface bidsRepository{
+GetLatestAuctionBids(ctx Context, auctionID string, optFns ... func( *OptionalGetParameters) ): []Bid, error
}
class handler {
-auctionService: auctionService
-itemRepository: itemRepository
-bidsRepository: bidsRepository
+CreateAuction(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+ItemID: string
+AuctionDate: Time
+BuyoutPrice: *float64
+AuctionType: string
+BidIncrement: float64

}
class response {
+Data: []auctionResponse

}
class auctionResponse {
+Auction: Auction
+Item: Item
+Bids: []Bid

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/item/createItem{
annotation functions/api/item/createItem {


-main()
}
interface itemService{
+CreateItem(ctx Context, item Item): Item, error
}
class request {
+Name: string
+Description: string
+Category: string

}
class response {
+ID: string
+Description: string
+Category: string
+OwnerID: string
+PhotoURLs: []string
+Name: string

}
class handler {
-itemService: itemService
+CreateItem(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class lambdaConfig {
+TableName: string

}
}
package functions/api/item/getItem{
annotation functions/api/item/getItem {


-main()
}
interface itemService{
+GetItemByID(ctx Context, itemID string): Item, error
}
class handler {
-itemService: itemService
+GetItem(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+ItemID: string

}
class response {
+ID: string
+Description: string
+Category: string
+OwnerID: string
+PhotoURLs: []string
+Name: string

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/item/getUserItemsList{
annotation functions/api/item/getUserItemsList {


-main()
}
interface itemService{
+GetItemsByUserName(ctx Context, userID string): []Item, error
}
class handler {
-itemService: itemService
+GetUserItems(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+UserName: string

}
class response {
+ItemList: []item

}
class item {
+ID: string
+Description: string
+Category: string
+OwnerID: string
+PhotoURLs: []string
+Name: string

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/user/createUser{
annotation functions/api/user/createUser {


-main()
}
interface userService{
+CreateUser(ctx Context, user User): User, error
}
class handler {
-userService: userService
+GetItems(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+UserName: string
+Password: string
+Email: string

}
class response {
+ID: string
+Username: string
+Password: string
+Email: string

}
class lambdaConfig {
+TableName: string

}
}
package functions/api/user/getUserByID{
annotation functions/api/user/getUserByID {


-main()
}
interface userService{
+GetUserByID(ctx Context, userID string): User, error
}
class request {
+UserID: string

}
class response {
+ID: string
+Username: string
+Email: string

}
class handler {
-userService: userService
+GetItems(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class lambdaConfig {
+TableName: string

}
}
package functions/authorizer{
annotation functions/authorizer {


-main()
}
interface authorizerService{
+Authorize(ctx Context, userName string, password string): AuthorizationConfig, error
}
class handler {
-authorizerService: authorizerService
+Authorize(ctx Context, event APIGatewayProxyRequest): APIGatewayProxyResponse, error
}
class request {
+Username: string
+Password: string

}
class response {
+Token: string

}
class lambdaConfig {
+TableName: string

}
}
package functions/eventbridge/auctionWorker{
annotation functions/eventbridge/auctionWorker {


-main()
}
interface auctionRepository{
+UpdateAuctionStage(ctx Context, auctionID string, stage string): error
+UpdateAuctionEndDate(ctx Context, auctionID string, endDate Time): error
}
interface eventRepository{
+UpdateEventRule(ctx Context, auctionID string, newDate Time): error
+DeleteEventRule(ctx Context, auctionID string): error
}
class handler {
-auctionRepo: auctionRepository
-eventRepository: eventRepository
+HandleAuction(ctx Context, event AuctionEvent): error
}
class lambdaConfig {
+TableName: string

}
}
package functions/eventbridge/bidWorker{
annotation functions/eventbridge/bidWorker {


-main()
}
interface auctionRepository{
+UpdateAuctionStage(ctx Context, auctionID string, stage string): error
+GetAuctionByID(ctx Context, auctionID string): Auction, error
+UpdateAuctionEndDate(ctx Context, auctionID string, endDate Time): error
}
interface eventRepository{
+UpdateEventRule(ctx Context, auctionID string, newDate Time): error
+DeleteEventRule(ctx Context, auctionID string): error
}
class handler {
-auctionRepo: auctionRepository
-eventRepository: eventRepository
+HandleBid(ctx Context, event DynamoDBEvent): error
}
class lambdaConfig {
+TableName: string

}
}
package models{
annotation models {
-const AuctionTypeAbsolute: AuctionType
-const UserRole: Role
-const BugalterRole: Role
-var AuctionEntityType: EntityType
-var ItemEntityType: EntityType
-var UserEntityType: EntityType
-var BidEntityType: EntityType
-var ItemCategoryAppliances: ItemCategory
-var ItemCategoryHome: ItemCategory
-var ItemCategoryCar: ItemCategory

}
class AuctionListView {
+Auction: Auction
+Item: Item

}
class AuctionEvent {
+AuctionID: string
+Stage: string
+EndDate: Time

}
class Auction {
+ID: string
+IsFinished: bool
+Type: AuctionType
+BuyoutPrice: *float64
+StartDate: Time
+Participants: []string
+BidIncrement: float64
+CreatorID: string
+ItemID: string
+EndDate: Time
+Stage: string

}
class AuthorizationConfig {
+Token: string

}
class Claims {
+Username: string
+: Role
+: StandardClaims

}
class UserConfig {
+Name: string
+Token: string

}
class Bid {
+ID: string
+Value: float64
+UserID: string
+AuctionID: string
+Timestamp: Time

}
class Item {
+ID: string
+Description: string
+Category: ItemCategory
+OwnerID: string
+PhotoURLs: []string
+AuctionID: string
+Name: string

}
class User {
+ID: string
+UserName: string
+Password: string
+Email: string
+Role: string

}
}
package repositories/auction{
annotation repositories/auction {


+New(tableName string, db DB): *repository
-unmarshalAuction(auctionDB AuctionDB): Auction, error
+ExtractAuction(items map[string]AttributeValue): Auction, error
+ExtractAuctions(items []map[string]AttributeValue): []Auction, error
}
interface DB{
+GetItem(ctx Context, input *GetItemInput, optFns ... func( *Options) ): *GetItemOutput, error
+PutItem(ctx Context, input *PutItemInput, optFns ... func( *Options) ): *PutItemOutput, error
+UpdateItem(ctx Context, input *UpdateItemInput, optFns ... func( *Options) ): *UpdateItemOutput, error
+Query(ctx Context, input *QueryInput, optFns ... func( *Options) ): *QueryOutput, error
+Scan(ctx Context, params *ScanInput, optFns ... func( *Options) ): *ScanOutput, error
}
class repository {
-tableName: string
+DB: DB
+CreateAuction(ctx Context, auction Auction): Auction, error
+GetAuctionByID(ctx Context, auctionID string): Auction, error
+FinishAuction(ctx Context, auctionID string): error
+GetAllAuctions(ctx Context, optFns ... func( *OptionalGetParameters) ): []Auction, error
+UpdateAuctionStage(ctx Context, auctionID string, stage string): error
+UpdateAuctionEndDate(ctx Context, auctionID string, endDate Time): error
}
class AuctionDB {
+PK: string
+SK: string
+BuyoutPrice: *float64
+StartDate: Time
+BidIncrement: float64
+EndDate: Time
+CreatorID: string
+Type: string
+IsFinished: bool
+ItemID: string
+Stage: string

}
class OptionalGetParameters {


}
}
package repositories/bid{
annotation repositories/bid {


+New(tableName string, db DB): *repository
-unmarshalItem(bidDB BidDB): Bid, error
+ExtractBid(attrItem map[string]AttributeValue): Bid, error
+ExtractBids(items []map[string]AttributeValue): []Bid, error
}
interface DB{
+GetItem(ctx Context, input *GetItemInput, optFns ... func( *Options) ): *GetItemOutput, error
+PutItem(ctx Context, input *PutItemInput, optFns ... func( *Options) ): *PutItemOutput, error
+Query(ctx Context, input *QueryInput, optFns ... func( *Options) ): *QueryOutput, error
}
class BidDB {
+PK: string
+SK: string
+Value: float64
+UserID: string
+GSI1PK: string
+GSI1SK: Time

}
class OptionalGetParameters {


}
class repository {
-tableName: string
+DB: DB
+CreateBid(ctx Context, auctionID string, bid Bid): Bid, error
+GetBidByID(ctx Context, bidID string): Bid, error
+GetLatestAuctionBids(ctx Context, auctionID string, optFns ... func( *OptionalGetParameters) ): []Bid, error
}
}
package repositories/eventbridge{
annotation repositories/eventbridge {


+New(eventClient eventClient): *repository
}
interface eventClient{
+PutRule(ctx Context, params *PutRuleInput, optFns ... func( *Options) ): *PutRuleOutput, error
+PutTargets(ctx Context, params *PutTargetsInput, optFns ... func( *Options) ): *PutTargetsOutput, error
+DeleteRule(ctx Context, params *DeleteRuleInput, optFns ... func( *Options) ): *DeleteRuleOutput, error
+RemoveTargets(ctx Context, params *RemoveTargetsInput, optFns ... func( *Options) ): *RemoveTargetsOutput, error
+PutEvents(ctx Context, params *PutEventsInput, optFns ... func( *Options) ): *PutEventsOutput, error
}
class repository {
-eventClient: eventClient
+CreateEventRule(ctx Context, auctionID string, startDate Time): error
+UpdateEventRule(ctx Context, auctionID string, newDate Time): error
+DeleteEventRule(ctx Context, auctionID string): error
+CreateBidEvent(ctx Context, auctionID string): error
}
}
package repositories/item{
annotation repositories/item {


+New(tableName string, db DB): *repository
-unmarshalItem(itemDB ItemDB): Item, error
+ExtractItem(items map[string]AttributeValue): Item, error
+ExtractItems(items []map[string]AttributeValue): []Item, error
}
interface DB{
+GetItem(ctx Context, input *GetItemInput, optFns ... func( *Options) ): *GetItemOutput, error
+PutItem(ctx Context, input *PutItemInput, optFns ... func( *Options) ): *PutItemOutput, error
+UpdateItem(ctx Context, input *UpdateItemInput, optFns ... func( *Options) ): *UpdateItemOutput, error
+Scan(ctx Context, params *ScanInput, optFns ... func( *Options) ): *ScanOutput, error
+Query(ctx Context, input *QueryInput, optFns ... func( *Options) ): *QueryOutput, error
}
class repository {
-tableName: string
+DB: DB
+CreateItem(ctx Context, item Item): Item, error
+GetItemByID(ctx Context, itemID string): Item, error
+AssignItem(ctx Context, auctionID string, itemID string): error
+GetItemsByUserName(ctx Context, userName string): []Item, error
}
class ItemDB {
+PK: string
+SK: string
+GSI1PK: string
+GSI1SK: string
+GSI2PK: string
+GSI2SK: string
+PhotoURLs: []string
+Description: string
+Name: string
+AuctionID: string

}
}
package repositories/user{
annotation repositories/user {


+New(tableName string, db DB): *repository
-unmarshalUser(userDB UserDB): User, error
+ExtractUser(items map[string]AttributeValue): User, error
}
interface DB{
+GetItem(ctx Context, input *GetItemInput, optFns ... func( *Options) ): *GetItemOutput, error
+PutItem(ctx Context, input *PutItemInput, optFns ... func( *Options) ): *PutItemOutput, error
+UpdateItem(ctx Context, input *UpdateItemInput, optFns ... func( *Options) ): *UpdateItemOutput, error
+Scan(ctx Context, params *ScanInput, optFns ... func( *Options) ): *ScanOutput, error
}
class UserDB {
+PK: string
+SK: string
+Password: string
+Email: string
+Role: string

}
class repository {
-tableName: string
+DB: DB
+CreateUser(ctx Context, user User): User, error
+GetUserByID(ctx Context, userID string): User, error
+GetUserByUserName(ctx Context, userName string): User, error
}
}
package services/auction{
annotation services/auction {


+New(auctionRepository auctionRepository, itemRepository itemRepository, eventRepository eventRepository): *service
}
interface eventRepository{
+CreateEventRule(ctx Context, auctionID string, startDate Time): error
}
interface auctionRepository{
+CreateAuction(ctx Context, auction Auction): Auction, error
+GetAuctionByID(ctx Context, auctionID string): Auction, error
+GetAllAuctions(ctx Context, optFns ... func( *OptionalGetParameters) ): []Auction, error
+FinishAuction(ctx Context, auctionID string): error
}
interface itemRepository{
+AssignItem(ctx Context, auctionID string, itemID string): error
+GetItemByID(ctx Context, itemID string): Item, error
}
class service {
-itemRepository: itemRepository
-auctionRepository: auctionRepository
-eventRepository: eventRepository
+CreateAuction(ctx Context, auction Auction, itemID string): Auction, error
+GetAuctionByID(ctx Context, auctionID string): Auction, error
+GetAuctions(ctx Context): []AuctionListView, error
+FinishAuction(ctx Context, auctionID string): error
}
}
package services/authorizer{
annotation services/authorizer {
-const defaultExpirationTime: int
-var jwtKey: 
+New(userRepository userRepository): *service
}
interface userRepository{
+GetUserByUserName(ctx Context, userName string): User, error
}
class service {
-userRepository: userRepository
+Authorize(ctx Context, userName string, password string): AuthorizationConfig, error
}
}
package services/bid{
annotation services/bid {


+New(auctionRepository auctionRepository, bidRepository bidRepository, userRepository userRepository, eventRepository eventRepository): *service
}
interface bidRepository{
+CreateBid(ctx Context, auctionID string, bid Bid): Bid, error
+GetBidByID(ctx Context, bidID string): Bid, error
+GetLatestAuctionBids(ctx Context, auctionID string, optFns ... func( *OptionalGetParameters) ): []Bid, error
}
interface auctionRepository{
+GetAuctionByID(ctx Context, auctionID string): Auction, error
+UpdateAuctionEndDate(ctx Context, auctionID string, endDate Time): error
}
interface userRepository{
+GetUserByID(ctx Context, userID string): User, error
}
interface eventRepository{
+CreateBidEvent(ctx Context, auctionID string): error
}
class service {
-auctionRepository: auctionRepository
-bidRepository: bidRepository
-userRepository: userRepository
-eventRepository: eventRepository
+PlaceBid(ctx Context, auctionID string, bid Bid): Bid, error
+GetBidByID(ctx Context, bidID string): Bid, error
+GetLatestAuctionBids(ctx Context, auctionID string, optFns ... func( *OptionalGetParameters) ): []Bid, error
}
}
package services/item{
annotation services/item {


+New(itemRepository itemRepository, auctionRepository auctionRepository): *service
}
interface auctionRepository{
+GetAuctionByID(ctx Context, auctionID string): Auction, error
}
interface itemRepository{
+CreateItem(ctx Context, item Item): Item, error
+GetItemByID(ctx Context, itemID string): Item, error
+AssignItem(ctx Context, auctionID string, itemID string): error
+GetItemsByUserName(ctx Context, userName string): []Item, error
}
class service {
-itemRepository: itemRepository
-auctionRepository: auctionRepository
+CreateItem(ctx Context, item Item): Item, error
+GetItemByID(ctx Context, itemID string): Item, error
+AssignItem(ctx Context, auctionID string, itemID string): error
+GetItemsByUserName(ctx Context, userName string): []Item, error
}
}
package services/user{
annotation services/user {


+New(userRepository userRepository): *service
}
interface userRepository{
+CreateUser(ctx Context, user User): User, error
+GetUserByID(ctx Context, userID string): User, error
+GetUserByUserName(ctx Context, userName string): User, error
}
class service {
-userRepository: userRepository
+CreateUser(ctx Context, user User): User, error
+GetUserByUserName(ctx Context, userName string): User, error
+GetUserByID(ctx Context, userID string): User, error
}
}
package utils{
annotation utils {


+InternalError(message string): APIGatewayProxyResponse, error
+Extract(entityType EntityType, key string): string
+Make(entityType EntityType, attrs ... string): string
+GetUserConfig(accessToken string): UserConfig, error
}
class APIError {
+StatusCode: int
+ErrorMessage: string

}
}
auction --> itemResponse
auctionResponse --> Auction
auctionResponse --> Item
AuctionListView --> Auction
AuctionListView --> Item
repository --|> auctionService
repository --|> auctionService
repository --|> auctionRepository
repository --|> auctionRepository
repository --|> auctionRepository
repository --|> auctionRepository
repository --|> auctionRepository
repository --|> bidService
repository --|> bidsRepository
repository --|> bidRepository
repository --|> eventRepository
repository --|> eventRepository
repository --|> eventRepository
repository --|> eventRepository
repository --|> itemRepository
repository --|> itemService
repository --|> itemService
repository --|> itemService
repository --|> itemRepository
repository --|> itemRepository
repository --|> userService
repository --|> userService
repository --|> userRepository
repository --|> userRepository
repository --|> userRepository
service --|> auctionService
service --|> auctionService
service --|> auctionService
service --|> auctionService
service --|> auctionService
service --|> auctionRepository
service --|> authorizerService
service --|> bidService
service --|> bidService
service --|> bidsRepository
service --|> itemRepository
service --|> itemService
service --|> itemService
service --|> itemService
service --|> itemRepository
service --|> itemRepository
service --|> userService
service --|> userService
service --|> userRepository
service --|> userRepository
service --|> userRepository
@enduml